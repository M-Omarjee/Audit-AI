# app/report_utils.py
from pathlib import Path
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors
from datetime import datetime

def resolve_logo_path() -> str | None:
    """Find an NHS logo image in /assets (PNG/JPG/JPEG)."""
    here = Path(__file__).resolve()
    project_root = here.parent.parent       # .../<repo>
    assets = project_root / "assets"
    for name in ["nhs.png", "nhs.jpg", "nhs.jpeg", "NHS.png", "NHS.jpg", "NHS.jpeg"]:
        p = assets / name
        if p.exists():
            return str(p)
    return None

def _centered_text(c, text, y, font="Helvetica-Bold", size=18):
    c.setFont(font, size)
    width, _ = A4
    x = (width - c.stringWidth(text, font, size)) / 2.0
    c.drawString(x, y, text)

def _draw_nhs_badge(c, x, y, w=3.2*cm, h=1.2*cm):
    """Fallback vector badge."""
    NHS_BLUE = colors.HexColor("#005EB8")
    c.setFillColor(NHS_BLUE); c.setStrokeColor(NHS_BLUE)
    c.rect(x, y, w, h, fill=1, stroke=0)
    c.setFillColor(colors.white)
    fs = h * 0.62
    c.setFont("Helvetica-Bold", fs)
    text = "NHS"
    tw = c.stringWidth(text, "Helvetica-Bold", fs)
    c.drawString(x + (w - tw)/2.0, y + (h - fs)/2.0 + 0.1*cm, text)
    c.setFillColor(colors.black)

def build_pdf(
    output_path: str,
    title: str,
    agg_dict: dict,
    n_records: int,
    recommendations: list[str] | None,
    author_name: str = "",
    author_grade: str = "",
    logo_path: str | None = None,
):
    """Returns the logo debug string ('image:/abs/path', 'vector', or 'error:<msg>')."""
    c = canvas.Canvas(output_path, pagesize=A4)
    width, height = A4
    margin = 2 * cm

    # Header band
    c.setFillColorRGB(0.95, 0.97, 1.0)
    c.rect(0, height - 3*cm, width, 3*cm, fill=1, stroke=0)
    c.setFillColor(colors.black)

    # --- Logo handling ---
    debug_logo = ""
    path = logo_path or resolve_logo_path()
    drew_logo = False
    if path:
        try:
            c.drawImage(ImageReader(path), margin, height - 2.5*cm,
                        width=3.2*cm, height=1.2*cm,
                        preserveAspectRatio=True, mask='auto')
            drew_logo = True
            debug_logo = f"image:{path}"
        except Exception as e:
            debug_logo = f"error:{e!s}"

    if not drew_logo:
        _draw_nhs_badge(c, margin, height - 2.5*cm, w=3.2*cm, h=1.2*cm)
        if not debug_logo:
            debug_logo = "vector"

    # Title + timestamp
    _centered_text(c, title, height - 1.3*cm, size=18)
    c.setFont("Helvetica", 9)
    ts = datetime.now().strftime("%d %b %Y %H:%M")
    ts_w = c.stringWidth(ts, "Helvetica", 9)
    c.drawString(width - margin - ts_w, height - 2.4*cm, ts)

    # Summary
    y = height - 3.4*cm
    c.setFont("Helvetica-Bold", 12); c.drawString(margin, y, "Summary"); y -= 14
    c.setFont("Helvetica", 10)
    overall = (agg_dict.get("overall") or 0.0) * 100
    c.drawString(margin, y, f"Overall compliance: {overall:.1f}%"); y -= 12
    c.drawString(margin, y, f"Records analysed: {n_records}"); y -= 20

    # Components
    c.setFont("Helvetica-Bold", 11); c.drawString(margin, y, "Component Compliance"); y -= 14
    c.setFont("Helvetica", 10)
    for k, v in agg_dict.items():
        if k == "overall": continue
        pct = (v or 0.0) * 100
        c.drawString(margin, y, f"• {k.replace('_',' ').title()}: {pct:.1f}%"); y -= 12
        if y < margin + 80:
            c.showPage(); y = height - margin
            c.setFont("Helvetica-Bold", 11); c.drawString(margin, y, "Component Compliance (cont.)")
            y -= 14; c.setFont("Helvetica", 10)

    # Recommendations
    if y < margin + 100:
        c.showPage(); y = height - margin
    c.setFont("Helvetica-Bold", 12); c.drawString(margin, y, "Recommendations"); y -= 14
    c.setFont("Helvetica", 10)
    if not recommendations:
        recommendations = ["Maintain performance via induction teaching and monthly spot checks."]
    for r in recommendations:
        c.drawString(margin, y, f"• {r}"); y -= 12
        if y < margin + 60:
            c.showPage(); y = height - margin; c.setFont("Helvetica", 10)

    # Signature
    if y < margin + 100:
        c.showPage(); y = height - margin
    c.setFont("Helvetica-Bold", 12); c.drawString(margin, y, "Author / Sign-off"); y -= 16
    c.setFont("Helvetica", 10)
    c.drawString(margin, y, f"Prepared by: {author_name}  ({author_grade})"); y -= 20
    line_w = 6 * cm
    c.line(margin, y, margin + line_w, y);           c.drawString(margin, y - 12, "Signature")
    c.line(margin + 8*cm, y, margin + 8*cm + line_w, y); c.drawString(margin + 8*cm, y - 12, "Date")

    # Footer
    c.setFont("Helvetica", 8); c.setFillColor(colors.grey)
    c.drawString(margin, margin/2, "Generated by AuditAI — Clinical Audit & QI Platform")
    c.setFillColor(colors.black)

    c.showPage()
    c.save()
    return debug_logo
